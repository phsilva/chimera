from typing import Callable, Type
from .protocol import Request, Response, Event
from .serializer import Serializer

type Callback = Callable[..., None]


class Transport:
    def __init__(self, host: str, port: int, serializer: Type[Serializer]):
        self.host = host
        self.port = port
        self.serializer = serializer()

    def bind(self) -> None: ...

    def connect(self) -> None: ...

    def close(self) -> None: ...

    def ping(self) -> bool: ...

    def send_request(self, request: Request) -> None: ...

    def recv_request(self) -> Request | None: ...

    def send_response(self, request: Request, response: Response) -> None: ...

    def recv_response(self, request: Request) -> Response | None: ...

    def publish(self, topic: str, event: Event) -> None: ...

    def subscribe(self, topic: str, callback: Callback) -> None: ...

    def unsubscribe(self, topic: str, callback: Callback) -> None: ...
